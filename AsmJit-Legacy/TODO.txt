TODO (Compiler):
[ ] Add ASMJIT_NOTHROW to all functions that can't throw exception
[ ] Function return values should be supported
[ ] Add possibility to easy call other functions through AsmJit::Compiler
[ ] Add possibility to set register allocator method 
    (to alloc preserved registers first or not - will be used together with
     calling different functions from jit generated code)
[ ] Add instruction reordering possibility in compiler (complex)
[ ] What about float and double variables in compiler ?
    Current implementation can reserve memory for these types, but can't
    alloc registers for them (because x87 is stack based).
    - Added more variable types, spill and alloc operations are now supported
      for all xmm data types (packed ints, packed floats/doubles, scalar float/double)

TODO (Architecture):
[ ] ARM support

TODO (Ideas)
[ ] There is quite mess in AsmJit::Variable's section. It should be cleaned 
    up and introduced new mechanisms to alloc and play with variables. I mean
    that .x(), .r() and .c() getters should be removed and introduced better
    schema.

    For example instead of :
      c->pshuf(var1.r(), var2.r());
    do only:
      c->pshuf(var1, var2);

    it's clean and target binary code will be smaller. Also we can check what
    registers will modify through called instruction, so there will be not needed
    to specify access type.

    This way will be harder, because it will be needed to connect Assembler
    instruction table with Compiler and also to add into that table what 
    registers will be accessed and modified by instruction itself. This seems 
    to be easy, but remember there are some special instructions which modifies
    something that is not in instruction itself (for example cmpxchg8b).

    To do this, something very similar to Serializer must be introduced. The
    emitter must decide which variable alloc to register (this will be always
    first one) and which can be in memory (if there will be enough registers I
    think that each variable should be in register).

    Currently I can imagine that I can do all of this, because this idea is 
    similar to current Serializer, I just make another one for Compiler (of
    course I must hide class symbols like in Serializer, look at the trick
    into source code:) ).
